[{"content":"<h2 id=\"-multilist\">MultiList</h2><p>A <code>MultiList</code> component creates a multiple checkbox select list widget. It’s useful for building an e-commerce facet like search experience.</p>","link":"./v1/components/MultiList.html","spaLink":"#/v1/components/MultiList","title":"MULTILIST"},{"content":"<h3 id=\"-multilist-props\">Props</h3><ul>\n<li><strong class=\"li-title\">sensorId</strong> : <code>String</code>: should be unique id of sensor which can be used in other sensor’s dependencies.   </li>\n<li><strong class=\"li-title\">appbaseField</strong> : <code>String</code>: is the name of the field which contains the latitude and longitude of the markers for which you want to plot on the map   </li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: Set the title of the component, to be shown in the UI.</li>\n<li><strong class=\"li-title\">defaultSelected</strong> : <code>Array</code>: of the default selected values   </li>\n<li><strong class=\"li-title\">showCount</strong>: <code>Boolean</code>: is the boolean option for whether displaying the count along with the items. Defaults to <code>true</code>.  </li>\n<li><strong class=\"li-title\">size</strong>: <code>number</code>: is the number field which decides how many items needs to be displayed in the List. Defaults to 100.    </li>\n<li><strong class=\"li-title\">sortBy</strong>: <code>count</code> or <code>asc</code> or <code>desc</code>: is the property which decides on how the list should be sorted. <code>count</code> sorts the list based on the count in the desc order. <code>asc</code> sorts the list in the ascending order of the term (Alphabetical). <code>desc</code> sorts the list in the descending order of the term. Defaulted to <code>count</code>.  </li>\n<li><strong class=\"li-title\">showSearch</strong>: <code>Boolean</code>: (default false): By applying <code>true</code>, the component will show search box to filter from list.</li>\n<li><strong class=\"li-title\">searchPlaceholder</strong>: <code>String</code>: Placeholder text applicable when <code>showSearch</code> prop is enabled.</li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: It should contain the sensors on which component is dependent. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a></li>\n</ul>","link":"./v1/components/MultiList.html","spaLink":"#/v1/components/MultiList","title":"Props"},{"content":"<h3 id=\"-multilist-css-styles\">CSS Styles</h3>","link":"./v1/components/MultiList.html","spaLink":"#/v1/components/MultiList","title":"CSS Styles"},{"content":"<h3 id=\"-multilist-examples\">Examples</h3><p>List with all the default props</p><p>List with custom sort and a default selection</p><p>List with show search set to true</p><p>List with a dependency on another sensor</p><p>Playground (with all knob actions)</p>","link":"./v1/components/MultiList.html","spaLink":"#/v1/components/MultiList","title":"Examples"},{"content":"<h2 id=\"-datasearch\">DataSearch</h2><p>A <code>DataSearch</code> component creates a searchbox with an autocomplete search functionality. Useful for full-text search, searching a specific field or a set of fields.</p>","link":"./v1/components/DataSearch.html","spaLink":"#/v1/components/DataSearch","title":"DATASEARCH"},{"content":"<h3 id=\"-datasearch-props\">Props</h3><ul>\n<li><strong class=\"li-title\">sensorId</strong>: <code>String</code>: should be unique id of sensor which can be used in other sensor’s dependencies.  </li>\n<li><strong class=\"li-title\">searchInputId</strong>: <code>String</code>: (optional) An additional sensor reference ID that allows actions on the search text changes.  </li>\n<li><strong class=\"li-title\">appbaseField</strong>: <code>String</code>: is the name of the field for price data in the appbase.io app. For a <code>DataSearch</code> component, the field should be of a <code>String</code> data type. Search can also be applied on more than one fields.  </li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: Sets the title of the component to be shown in the UI.</li>\n<li><strong class=\"li-title\">placeholder</strong>: <code>string</code>: is the placeholder text to be shown in the searhbox.  </li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: It should contain the sensors on which the component is dependent. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a></li>\n</ul>","link":"./v1/components/DataSearch.html","spaLink":"#/v1/components/DataSearch","title":"Props"},{"content":"<h3 id=\"-datasearch-css-styles\">CSS Styles</h3>","link":"./v1/components/DataSearch.html","spaLink":"#/v1/components/DataSearch","title":"CSS Styles"},{"content":"<h3 id=\"-datasearch-examples\">Examples</h3><p>DataSearch with all the default props</p><p>Datasearch on multiple search fields</p><p>DataSearch with a list actuator that shows results on <code>searchInputId</code> changes</p><p>Playground (with all knob actions)</p>","link":"./v1/components/DataSearch.html","spaLink":"#/v1/components/DataSearch","title":"Examples"},{"content":"<h2 id=\"-multirange\">MultiRange</h2><p>A <code>MultiRange</code> component creates a multiple checkbox based numeric range selector. It’s useful for filtering data by prices, for instance.</p>","link":"./v1/components/MultiRange.html","spaLink":"#/v1/components/MultiRange","title":"MULTIRANGE"},{"content":"<h3 id=\"-multirange-props\">Props</h3><ul>\n<li><strong class=\"li-title\">sensorId</strong> : <code>String</code>: should be unique id of sensor which can be used in other sensor’s dependencies.   </li>\n<li><strong class=\"li-title\">appbaseField</strong> : <code>String</code>: is the name of the field for price data in the appbase.io app. For a <code>SingleRange</code> component, the field should be of a numeric data type.</li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: Sets the title of the component to be shown in the UI.</li>\n<li><strong class=\"li-title\">defaultSelected</strong>: <code>Array</code>: is the default selected array of labels.</li>\n<li><strong class=\"li-title\">data</strong>: <code>Object Array</code>: is a collection of UI options with labels and [start, end] range values</li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: It should contain the sensors on which the component is dependent. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a></li>\n</ul>","link":"./v1/components/MultiRange.html","spaLink":"#/v1/components/MultiRange","title":"Props"},{"content":"<h3 id=\"-multirange-css-styles\">CSS Styles</h3>","link":"./v1/components/MultiRange.html","spaLink":"#/v1/components/MultiRange","title":"CSS Styles"},{"content":"<h3 id=\"-multirange-examples\">Examples</h3><p>Range with all the default props</p><p>Range with multiple default selections</p><p>Range with a dependency on another sensor</p><p>Playground (with all knob actions)</p>","link":"./v1/components/MultiRange.html","spaLink":"#/v1/components/MultiRange","title":"Examples"},{"content":"<h2 id=\"-rangeslider\">RangeSlider</h2><p>A <code>RangeSlider</code> component creates a numeric range slider. It’s useful for granular filtering of numeric data.</p>","link":"./v1/components/RangeSlider.html","spaLink":"#/v1/components/RangeSlider","title":"RANGESLIDER"},{"content":"<h3 id=\"-rangeslider-props\">Props</h3><ul>\n<li><strong class=\"li-title\">sensorId</strong> : <code>String</code>: should be unique id of sensor which can be used in other sensor’s dependencies.   </li>\n<li><strong class=\"li-title\">appbaseField</strong> : <code>String</code>: is the name of the field for the range slider data in the appbase.io app. For a <code>RangeSlider</code> component, the field should be of a numeric data type.</li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: Sets the title of the component to be shown in the UI.</li>\n<li><strong class=\"li-title\">defaultSelected</strong>: <code>Object</code>: (Optional) is the default selection of the slider values.    </li>\n<li><strong class=\"li-title\">startThreshold</strong>: <code>Number</code>: is the minimum value available to be set on the range slider.  </li>\n<li><strong class=\"li-title\">endThreshold</strong>: <code>Number</code>: is the maximum value avaiable to be set on the range slider.  </li>\n<li><strong class=\"li-title\">stepValue</strong>: <code>Number</code>: is the step value between two nearest units, defaults to 1.</li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: It should contain the sensors on which the component is dependent. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a></li>\n</ul>","link":"./v1/components/RangeSlider.html","spaLink":"#/v1/components/RangeSlider","title":"Props"},{"content":"<h3 id=\"-rangeslider-css-styles\">CSS Styles</h3>","link":"./v1/components/RangeSlider.html","spaLink":"#/v1/components/RangeSlider","title":"CSS Styles"},{"content":"<h3 id=\"-rangeslider-examples\">Examples</h3><p>Range with all the default props</p><p>Range with a default selection</p><p>Range with a dependency on another sensor</p><p>Playground (with all knob actions)</p>","link":"./v1/components/RangeSlider.html","spaLink":"#/v1/components/RangeSlider","title":"Examples"},{"content":"<h2 id=\"-singlelist\">SingleList</h2><p>A <code>SingleList</code> component creates a single radio select list widget. It’s useful for building a selecting a category amongst many categories of items, like in an online shopping experience.</p>","link":"./v1/components/SingleList.html","spaLink":"#/v1/components/SingleList","title":"SINGLELIST"},{"content":"<h3 id=\"-singlelist-props\">Props</h3><ul>\n<li><strong class=\"li-title\">sensorId</strong> : <code>String</code>: should be unique id of sensor which can be used in other sensor’s dependencies.   </li>\n<li><strong class=\"li-title\">appbaseField</strong> : <code>String</code>: is the name of the field which contains the latitude and longitude of the markers for which you want to plot on the map   </li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: Set the title of the component, to be shown in the UI.</li>\n<li><strong class=\"li-title\">defaultSelected</strong> : <code>string</code>: is the default selected value.   </li>\n<li><strong class=\"li-title\">showCount</strong>: <code>Boolean</code>: is the boolean option for whether displaying the count along with the items. Defaults to <code>true</code>.  </li>\n<li><strong class=\"li-title\">size</strong>: <code>number</code>: is the number field which decides how many items needs to be displayed in the List. Defaults to 100.    </li>\n<li><strong class=\"li-title\">sortBy</strong>: <code>count</code> or <code>asc</code> or <code>desc</code>: is the property which decides on how the list should be sorted. <code>count</code> sorts the list based on the count in the desc order. <code>asc</code> sorts the list in the ascending order of the term (Alphabetical). <code>desc</code> sorts the list in the descending order of the term. Defaulted to <code>count</code>.  </li>\n<li><strong class=\"li-title\">showSearch</strong>: <code>Boolean</code>: (default false): By applying <code>true</code>, the component will show search box to filter from list.</li>\n<li><strong class=\"li-title\">searchPlaceholder</strong>: <code>String</code>: Placeholder text applicable when <code>showSearch</code> prop is enabled.</li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: It should contain the sensors on which component is dependent. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a></li>\n</ul>","link":"./v1/components/SingleList.html","spaLink":"#/v1/components/SingleList","title":"Props"},{"content":"<h3 id=\"-singlelist-css-styles\">CSS Styles</h3>","link":"./v1/components/SingleList.html","spaLink":"#/v1/components/SingleList","title":"CSS Styles"},{"content":"<h3 id=\"-singlelist-examples\">Examples</h3><p>List with all the default props</p><p>List with custom sort and a default selection</p><p>List with show search set to true</p><p>List with a dependency on another sensor</p><p>Playground (with all knob actions)</p>","link":"./v1/components/SingleList.html","spaLink":"#/v1/components/SingleList","title":"Examples"},{"content":"<h2 id=\"-resultlist\">ResultList</h2><p>A <code>ResultList</code> component creates a result list widget. Unlike other sensors whose states can be filtered by the end user, <code>ResultList</code> behaves as an actuator that displays the results of other sensor components in a list.</p>","link":"./v1/components/ResultList.html","spaLink":"#/v1/components/ResultList","title":"RESULTLIST"},{"content":"<h3 id=\"-resultlist-props\">Props</h3><ul>\n<li><strong class=\"li-title\">sensorId</strong> : <code>String</code>: Unique id of the sensor.  </li>\n<li><strong class=\"li-title\">appbaseField</strong> : <code>String</code>: Data field associated with the <code>ResultList</code> sensor, useful for providing a sort context.  </li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: Set the title of the component, to be shown in the UI.      </li>\n<li><strong class=\"li-title\">sortBy</strong>: <code>String</code>: Allows sorting of results by <code>default</code>, <code>asc</code> or <code>desc</code> order. The list is already sorted by relevancy of matches to the applied sensors. <code>asc</code> sorts the list in the ascending order of the associated appbaseField’s value (Alphabetical). <code>desc</code> sorts the list based on the appbaseField value in the descending order.  </li>\n<li><strong class=\"li-title\">from</strong>: <code>Number</code>: is the starting point from where to fetch the results. Useful in a pagination context. Defaults to 0.  </li>\n<li><strong class=\"li-title\">size</strong>: <code>Number</code>: is the number of results to be shown per page. Defaults to 20.  </li>\n<li><strong class=\"li-title\">requestOnScroll</strong>: <code>Boolean</code>: Should a paginate data request be made when scroll reaches the end of the component view? Defaults to <code>true</code>, allowing an infinite scroll functionality.  </li>\n<li><strong class=\"li-title\">componentStyle</strong>: <code>Object</code>: CSS Styles to be applied to the <strong>ResultList</strong> component.  </li>\n<li><strong class=\"li-title\">onData</strong>: <code>Function</code>: A callback function where user can define how to render the view based on the data changes.     </li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: An object defining the sensor components that trigger the <code>ResultList</code> query. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a>.</li>\n</ul>","link":"./v1/components/ResultList.html","spaLink":"#/v1/components/ResultList","title":"Props"},{"content":"<h3 id=\"-resultlist-extending-resultlist\">Extending ResultList</h3><p><code>onData</code> prop registers a function callback which is triggered every time there is a change in the data results so that the user can render the <code>ResultList</code> view.</p><p>The callback function returns an Array of HTML elements (think list items) which are then rendered to the view as ResultList items.  </p><p><strong>Usage</strong>:  </p><ul>\n<li><strong class=\"li-title\">res</strong>: <code>Object</code> Response object containing:  <ul>\n<li><strong class=\"li-title\">mode</strong>: <code>String</code>: “historic” when results are returned from the existing dataset and “streaming” when new results are matched.  </li>\n<li><strong class=\"li-title\">newData</strong>: <code>Object</code>: An object array when returning historic data results or a single object for streaming mode updates.  </li>\n<li><strong class=\"li-title\">currentData</strong>: <code>Array Object</code>: An array of the result objects being shown in the current component view.  </li>\n<li><strong class=\"li-title\">appliedQuery</strong>: <code>Object</code>: Raw query object that triggered the function callback, useful for debugging.  </li>\n<li><strong class=\"li-title\">took</strong>: <code>Number</code>: (Optional) Time taken in milliseconds, only passed when the mode is “historic”.</li>\n</ul>\n</li>\n<li><strong class=\"li-title\">err</strong>: <code>Object</code> Error object. </li>\n</ul><ul>\n<li><strong class=\"li-title\">mode</strong>: <code>String</code>: “historic” when results are returned from the existing dataset and “streaming” when new results are matched.  </li>\n<li><strong class=\"li-title\">newData</strong>: <code>Object</code>: An object array when returning historic data results or a single object for streaming mode updates.  </li>\n<li><strong class=\"li-title\">currentData</strong>: <code>Array Object</code>: An array of the result objects being shown in the current component view.  </li>\n<li><strong class=\"li-title\">appliedQuery</strong>: <code>Object</code>: Raw query object that triggered the function callback, useful for debugging.  </li>\n<li><strong class=\"li-title\">took</strong>: <code>Number</code>: (Optional) Time taken in milliseconds, only passed when the mode is “historic”.</li>\n</ul>","link":"./v1/components/ResultList.html","spaLink":"#/v1/components/ResultList","title":"Extending ResultList"},{"content":"<h3 id=\"-resultlist-css-styles\">CSS Styles</h3>","link":"./v1/components/ResultList.html","spaLink":"#/v1/components/ResultList","title":"CSS Styles"},{"content":"<h3 id=\"-resultlist-examples\">Examples</h3><p>ResultList with all the default props with a single sensor filter.</p><p>ResultList with an infinite scroll with a single sensor filter.</p><p>ResultList with a pagination view based on a search and a filter sensor.</p><p>ResultList that shows streaming updates.</p><p>Playground (with all knob actions)</p>","link":"./v1/components/ResultList.html","spaLink":"#/v1/components/ResultList","title":"Examples"},{"content":"<h2 id=\"-textfield\">TextField</h2><p>A <code>TextField</code> component creates a simple text input field. It’s useful for taking specific data for defining custom queries, like specifying map bounds of an area.</p>","link":"./v1/components/TextField.html","spaLink":"#/v1/components/TextField","title":"TEXTFIELD"},{"content":"<h3 id=\"-textfield-props\">Props</h3><ul>\n<li><strong class=\"li-title\">sensorId</strong> : <code>String</code>: should be unique id of sensor which can be used in other sensor’s dependencies.  </li>\n<li><strong class=\"li-title\">appbaseField</strong> : <code>String</code>: (optional) is the name of the field for price data in the appbase.io app.  </li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: Sets the title of the component to be shown in the UI.  </li>\n<li><strong class=\"li-title\">placeholder</strong>: <code>string</code>: is the placeholder text label  </li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: It should contain the sensors on which the component is dependent. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a></li>\n</ul>","link":"./v1/components/TextField.html","spaLink":"#/v1/components/TextField","title":"Props"},{"content":"<h3 id=\"-textfield-css-styles\">CSS Styles</h3>","link":"./v1/components/TextField.html","spaLink":"#/v1/components/TextField","title":"CSS Styles"},{"content":"<h3 id=\"-textfield-examples\">Examples</h3><p>Text field with a custom query</p><p>Playground (with all knob actions)</p>","link":"./v1/components/TextField.html","spaLink":"#/v1/components/TextField","title":"Examples"},{"content":"<h2 id=\"-togglebutton\">ToggleButton</h2><p>A <code>ToggleButton</code> component creates a single or multiple toggle button selector. It’s useful for filtering data by boolean like fields. Like, is the restaurant open now or not.</p>","link":"./v1/components/ToggleButton.html","spaLink":"#/v1/components/ToggleButton","title":"TOGGLEBUTTON"},{"content":"<h3 id=\"-togglebutton-props\">Props</h3><ul>\n<li><strong class=\"li-title\">sensorId</strong>: <code>String</code>: should be unique id of sensor which can be used in other sensor’s dependencies.   </li>\n<li><strong class=\"li-title\">appbaseField</strong>: <code>String</code>: is the name of the field for price data in the appbase.io app. For a <code>ToggleButton</code> component, the field should be of a numeric data type.</li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: Sets the title of the component to be shown in the UI.</li>\n<li><strong class=\"li-title\">defaultSelected</strong>: <code>Array</code>: of the default selected label(s)   </li>\n<li><strong class=\"li-title\">data</strong>: <code>Object Array</code>: is a collection of UI options with labels and value fields</li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: It should contain the sensors on which the component is dependent. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a></li>\n</ul>","link":"./v1/components/ToggleButton.html","spaLink":"#/v1/components/ToggleButton","title":"Props"},{"content":"<h3 id=\"-togglebutton-css-styles\">CSS Styles</h3>","link":"./v1/components/ToggleButton.html","spaLink":"#/v1/components/ToggleButton","title":"CSS Styles"},{"content":"<h3 id=\"-togglebutton-examples\">Examples</h3><p>A single toggle button with all the default props</p><p>A multiple toggle button with default props</p><p>A multiple toggle button with specific default selected labels</p><p>Playground (with all knob actions)</p>","link":"./v1/components/ToggleButton.html","spaLink":"#/v1/components/ToggleButton","title":"Examples"},{"content":"<h2 id=\"-singlerange\">SingleRange</h2><p>A <code>SingleRange</code> component creates a numeric range selector. It’s useful for filtering data by prices, for instance.</p>","link":"./v1/components/SingleRange.html","spaLink":"#/v1/components/SingleRange","title":"SINGLERANGE"},{"content":"<h3 id=\"-singlerange-props\">Props</h3><ul>\n<li><strong class=\"li-title\">sensorId</strong> : <code>String</code>: should be unique id of sensor which can be used in other sensor’s dependencies.   </li>\n<li><strong class=\"li-title\">appbaseField</strong> : <code>String</code>: is the name of the field for price data in the appbase.io app. For a <code>SingleRange</code> component, the field should be of a numeric data type.</li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: Sets the title of the component to be shown in the UI.</li>\n<li><strong class=\"li-title\">defaultSelected</strong>: <code>string</code>: is the default selected label   </li>\n<li><strong class=\"li-title\">data</strong>: <code>Object Array</code>: is a collection of UI options with labels and [start, end] range values</li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: It should contain the sensors on which the component is dependent. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a></li>\n</ul>","link":"./v1/components/SingleRange.html","spaLink":"#/v1/components/SingleRange","title":"Props"},{"content":"<h3 id=\"-singlerange-css-styles\">CSS Styles</h3>","link":"./v1/components/SingleRange.html","spaLink":"#/v1/components/SingleRange","title":"CSS Styles"},{"content":"<h3 id=\"-singlerange-examples\">Examples</h3><p>Range with all the default props</p><p>Range with a default selection</p><p>Range with a dependency on another sensor</p><p>Playground (with all knob actions)</p>","link":"./v1/components/SingleRange.html","spaLink":"#/v1/components/SingleRange","title":"Examples"},{"content":"<h2 id=\"-define-dependency-on-other-sensors\">Define dependency on other sensors</h2><ul>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: it should contain the sensors on which component is dependent.</li>\n</ul><ul>\n<li><p><strong class=\"li-title\">operation</strong>: <code>String</code>: It should be either <code>must</code> or <code>should</code>. It decides whether this query should be inside must clause or should clause.</p>\n</li>\n<li><p><strong class=\"li-title\">defaultQuery</strong>: <code>Function</code>: (optional) this function will receive value of that particulat sensor and user needs to create query on basis of that and return the query, If you don’t specify defaultquery queryBuilder will include the default query of that sensor.</p>\n</li>\n<li><p><strong class=\"li-title\">doNotExecute</strong>: <code>Boolean</code>: (by default true) If you don’t want to execute query immediatly after dependent sensor changees, then apply true as value. In this case your component already append sensor query but just didn’t execute it immediatly.</p>\n</li>\n</ul><p><strong class=\"li-title\">operation</strong>: <code>String</code>: It should be either <code>must</code> or <code>should</code>. It decides whether this query should be inside must clause or should clause.</p><p><strong class=\"li-title\">defaultQuery</strong>: <code>Function</code>: (optional) this function will receive value of that particulat sensor and user needs to create query on basis of that and return the query, If you don’t specify defaultquery queryBuilder will include the default query of that sensor.</p><p><strong class=\"li-title\">doNotExecute</strong>: <code>Boolean</code>: (by default true) If you don’t want to execute query immediatly after dependent sensor changees, then apply true as value. In this case your component already append sensor query but just didn’t execute it immediatly.</p><p>Let’s take an example if topics lists is depenedent on city selection (topicSensor is dependent on citySensor).</p><p>To achieve this</p><p>Use this sensorId in other sensor.</p><p>City Sensor should look like this</p><p>Topic Sensor should look like this</p>","link":"./v1/getting-started/Dependency.html","spaLink":"#/v1/getting-started/Dependency","title":"DEFINE DEPENDENCY ON OTHER SENSORS"},{"content":"<h1 id=\"realtime-react-map-library\">Realtime React Map library</h1>","link":"./v1/getting-started/start.html","spaLink":"#/v1/getting-started/start","title":"REALTIME REACT MAP LIBRARY"},{"content":"<h2 id=\"realtime-react-map-library-how-to-use\">How to use</h2><p>Include the map library in your html file with your key    </p><p>Import reactive-map components and use it inside react components.</p>","link":"./v1/getting-started/start.html","spaLink":"#/v1/getting-started/start","title":"HOW TO USE"},{"content":"<h3 id=\"-appbasemap-component\">AppbaseMap component</h3><ul>\n<li><code>appbaseField</code>: <code>string</code>: is the name of the field which contains the latitude and longitude of the markers for which you want to plot on the map    </li>\n<li><code>historicalData</code>: <code>Boolean</code>: is the boolean field which on true, shows the old results and on false, will only run searchstream(). Defaulted to <code>true</code>    </li>\n<li><code>markerCluster</code>: <code>Boolean</code>: is the property which decides on clustering the markers. Defaulted to <code>true</code>        </li>\n<li><code>mapStyle</code>: is the property which set the default map style. Available options for mapStyle is: <code>\"MapBox\"</code>, <code>\"Blue Essence\"</code>, <code>\"Blue Water\"</code>,  <code>\"Flat Map\"</code>,  <code>\"Light Monochrome\"</code>,  <code>\"Midnight Commander\"</code>,  <code>\"Unsaturated Browns\"</code>.  </li>\n<li><code>autoCenter</code>: <code>Boolean</code>: is the property which decides whether to change center of map according to result or not.</li>\n<li><code>searchAsMoveComponent</code>: <code>Boolean</code>: is the property which decides whether to include search as move (internal component) component or not. Defaults to false.</li>\n<li><code>mapStylesComponent</code>: <code>Boolean</code>: is the property which decides whether to include map style chooser component or not.  </li>\n<li><code>title</code>: <code>string</code>: is the property which sets the title.</li>\n<li><code>depends</code>: <code>object</code>: is the property where user can specify the dependency on sensors.</li>\n<li><p><strong class=\"li-title\">onData</strong>: is the event which is fired when one or more markers are indexed, updated or removed from the map. It takes an object with the following properties:</p>\n<pre><code class=\"lang-js prettyprint prettyprinted\" style=\"\"><span class=\"pun\">{</span><span class=\"pln\">\nmode</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'historic'</span></span><span class=\"pln\"> or </span><span class=\"string\"><span class=\"str\">'streaming'</span></span><span class=\"pun\">,</span><span class=\"pln\">\nnewData</span><span class=\"pun\">:</span><span class=\"pln\"> data which is the response of xhr call or streaming data</span><span class=\"pun\">,</span><span class=\"pln\">\ncurrentData</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Array</span><span class=\"pln\"> of all existing markers data in the view </span><span class=\"pun\">(</span><span class=\"pln\">should be </span><span class=\"pun\">[]</span><span class=\"pln\"> on query change</span><span class=\"pun\">),</span><span class=\"pln\">\nappliedQuery</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Raw</span><span class=\"pln\"> query object</span><span class=\"pun\">,</span><span class=\"pln\">\ntook</span><span class=\"pun\">:</span><span class=\"pln\"> time in milliseconds </span><span class=\"pun\">(</span><span class=\"pln\">optional</span><span class=\"pun\">,</span><span class=\"pln\"> only applicable when mode is historic</span><span class=\"pun\">)</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p>and also user can return the markup which will be append inside map (as ex. Polygon, circles, rectangles can be return using <a href=\"https://github.com/tomchentw/react-google-maps\">react-component</a> ).</p>\n</li>\n<li><p><strong class=\"li-title\">mapOnIdle</strong>: is the event which is fired when map reached to its idle state after dragging or zooming effect. It has argument which contains </p>\n<pre><code class=\"lang-js prettyprint prettyprinted\" style=\"\"><span class=\"pun\">{</span><span class=\"pln\">\nboundingBoxCoordinates</span><span class=\"pun\">:</span><span class=\"pln\"> object which contains top_left</span><span class=\"pun\">,</span><span class=\"pln\"> bottom_right of current map bounds</span><span class=\"pun\">,</span><span class=\"pln\">\nmapBounds</span><span class=\"pun\">:</span><span class=\"pln\"> original map bounds which is returned by map\n</span><span class=\"pun\">}</span></code></pre>\n<p>and also user can return the markup which will be append inside map (as ex. Polygon, circles, rectangles can be return using <a href=\"https://github.com/tomchentw/react-google-maps\">react-component</a> ).</p>\n</li>\n<li><p><strong class=\"li-title\">Events</strong>:  <code>markerOnClick</code>, <code>markerOnDblclick</code>, <code>markerOnMouseover</code>, <code>markerOnMouseout</code> are the events which will be fired on click, doubleclick, mouse over, mouse out actions on markers.   </p>\n</li>\n<li><strong class=\"li-title\">searchAsMoveDefault</strong>: <code>Boolean</code>: is the property which set the default value of <code>searchAsMove</code> component. By default it’s value is false.  /</li>\n<li><strong class=\"li-title\">streamActiveTime</strong>: <code>Number</code>: (default: 5) is the property which decides the time interval of streaming marker, after that time period marker icon will be converted to normal icon.</li>\n</ul><p><strong class=\"li-title\">onData</strong>: is the event which is fired when one or more markers are indexed, updated or removed from the map. It takes an object with the following properties:</p><p>and also user can return the markup which will be append inside map (as ex. Polygon, circles, rectangles can be return using <a href=\"https://github.com/tomchentw/react-google-maps\">react-component</a> ).</p><p><strong class=\"li-title\">mapOnIdle</strong>: is the event which is fired when map reached to its idle state after dragging or zooming effect. It has argument which contains </p><p>and also user can return the markup which will be append inside map (as ex. Polygon, circles, rectangles can be return using <a href=\"https://github.com/tomchentw/react-google-maps\">react-component</a> ).</p><p><strong class=\"li-title\">Events</strong>:  <code>markerOnClick</code>, <code>markerOnDblclick</code>, <code>markerOnMouseover</code>, <code>markerOnMouseout</code> are the events which will be fired on click, doubleclick, mouse over, mouse out actions on markers.   </p>","link":"./v1/map-components/ReactiveMap.html","spaLink":"#/v1/map-components/ReactiveMap","title":"AppbaseMap component"},{"content":"<h3 id=\"-css-styles\">CSS Styles</h3>","link":"./v1/map-components/ReactiveMap.html","spaLink":"#/v1/map-components/ReactiveMap","title":"CSS Styles"},{"content":"<h3 id=\"-examples\">Examples</h3><p>ReactiveMap with all the default props.</p><p>ReactiveMap with a search sensor on the map.</p><p>ReactiveMap with historical and realtime data.</p><p>ReactiveMap with events example.</p><p>ReactiveMap with weather data.</p>","link":"./v1/map-components/ReactiveMap.html","spaLink":"#/v1/map-components/ReactiveMap","title":"Examples"},{"content":"<h2 id=\"-elasticsearch-mapping\">Elasticsearch Mapping</h2>","link":"./v1/mapping/mapping.html","spaLink":"#/v1/mapping/mapping","title":"ELASTICSEARCH MAPPING"}]