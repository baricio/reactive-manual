[{"content":"<h2 id=\"-appbaselist\">AppbaseList</h2><ul>\n<li><strong class=\"li-title\">sensorId</strong> : <code>string</code>: should be unique id of sensor which can be used in other sensor’s dependencies.   </li>\n<li><strong class=\"li-title\">inputData</strong> : <code>string</code>: is the name of the field which contains the latitude and longitude of the markers for which you want to plot on the map   </li>\n<li><strong class=\"li-title\">defaultSelected</strong> : <code>string</code>: is the default selected value (only applicable for single item selection)   </li>\n<li><strong class=\"li-title\">size</strong>: <code>number</code>: is the number field which decides how many items needs to be displayed in the List. Defaulted to 60.    </li>\n<li><strong class=\"li-title\">showCount</strong>: <code>\"Boolean\"</code>: is the boolean option for whether displaying the count along with the items. Defaulted to <code>true</code>.    </li>\n<li><strong class=\"li-title\">multipleSelect</strong>: <code>Boolean</code>: is the boolean option to select whether the only single item could be selected in the List or if it is multiple selectable. Defaulted to <code>true</code>.   </li>\n<li><strong class=\"li-title\">sort</strong>: <code>count</code> or <code>asc</code> or <code>desc</code>: is the property which decides on how the list should be sorted. <code>count</code> sorts the list based on the count  in the desc order. <code>asc</code> sorts the list in the ascending order of the term (Alphabetical). <code>desc</code> sorts the list in the descending order of the term. Defaulted to <code>count</code>.  </li>\n<li><strong class=\"li-title\">staticSearch</strong>: <code>Boolean</code>: (default false): By applying true component will have search box to filter from list.</li>\n<li><strong class=\"li-title\">title</strong>: <code>String</code>: It set the title of component.</li>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: It should contain the sensors on which component is dependent. <a href=\"https://appbaseio.github.io/reactive-maps-docs/v1/getting-started/Dependency.html\">read more</a></li>\n</ul>","link":"./v1/getting-started/AppbaseList.html","spaLink":"#/v1/getting-started/AppbaseList","title":"APPBASELIST"},{"content":"<h2 id=\"-appbasesearch\">AppbaseSearch</h2><ul>\n<li><code>fieldName</code> : <code>string</code>: is the name of the field which contains the latitude and longitude of the markers for which you want to plot on the map    </li>\n<li><code>placeholder</code>: <code>string</code>: is the string field which decides placeholder for the search input. Default to <code>Search...</code>    </li>\n<li><code>isGeoSearch</code>: <code>\"Boolean\"</code>: is the boolean option for whether displaying the search field as input term search or is it geoSearch. Defaulted to <code>false</code>     </li>\n<li><code>size</code>: <code>number</code>: is the number field which decides how many items needs to be displayed in the search items. Defaulted to 10.  </li>\n<li><code>depends</code>: Same way as AppbaseMap we provides internal method for AppbaseSearch as well. We exposed a method to use on changing of dependency: <code>searchFilterByCity</code>.    </li>\n</ul>","link":"./v1/getting-started/AppbaseSearch.html","spaLink":"#/v1/getting-started/AppbaseSearch","title":"APPBASESEARCH"},{"content":"<h2 id=\"-appbaseslider\">AppbaseSlider</h2><ul>\n<li><code>fieldName</code> : <code>string</code>: is the name of the field which contains the latitude and longitude of the markers for which you want to plot on the map    </li>\n<li><code>minThreshold</code>: <code>number</code>: is the number field which decides the minimum threshold value for the slider. Defaulted to 0.  </li>\n<li><code>maxThreshold</code>: <code>number</code>: is the number field which decides the maximum threshold value for the slider. Defaulted to 20. </li>\n<li><code>values</code>: <code>Object</code>: is the object which has property min and max which tells the default selected value.     <pre><code class=\"prettyprint prettyprinted\" style=\"\"><span class=\"pln\">values</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\nmin</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\">\nmax</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre></li>\n</ul>","link":"./v1/getting-started/AppbaseSlider.html","spaLink":"#/v1/getting-started/AppbaseSlider","title":"APPBASESLIDER"},{"content":"<h1 id=\"realtime-react-map-library\">Realtime React Map library</h1>","link":"./v1/getting-started/start.html","spaLink":"#/v1/getting-started/start","title":"REALTIME REACT MAP LIBRARY"},{"content":"<h2 id=\"realtime-react-map-library-how-to-use\">How to use</h2><p>Include the map library in your html file with your key    </p><p>Import reactive-map components and use it inside react components.</p>","link":"./v1/getting-started/start.html","spaLink":"#/v1/getting-started/start","title":"HOW TO USE"},{"content":"<h2 id=\"-define-dependency-on-other-sensors\">Define dependency on other sensors</h2><ul>\n<li><strong class=\"li-title\">depends</strong>: <code>Object</code>: it should contain the sensors on which component is dependent.</li>\n</ul><ul>\n<li><p><strong class=\"li-title\">operation</strong>: <code>String</code>: It should be either <code>must</code> or <code>should</code>. It decides whether this query should be inside must clause or should clause.</p>\n</li>\n<li><p><strong class=\"li-title\">defaultQuery</strong>: <code>Function</code>: (optional) this function will receive value of that particulat sensor and user needs to create query on basis of that and return the query, If you don’t specify defaultquery queryBuilder will include the default query of that sensor.</p>\n</li>\n<li><p><strong class=\"li-title\">doNotExecute</strong>: <code>Boolean</code>: (by default true) If you don’t want to execute query immediatly after dependent sensor changees, then apply true as value. In this case your component already append sensor query but just didn’t execute it immediatly.</p>\n</li>\n</ul><p><strong class=\"li-title\">operation</strong>: <code>String</code>: It should be either <code>must</code> or <code>should</code>. It decides whether this query should be inside must clause or should clause.</p><p><strong class=\"li-title\">defaultQuery</strong>: <code>Function</code>: (optional) this function will receive value of that particulat sensor and user needs to create query on basis of that and return the query, If you don’t specify defaultquery queryBuilder will include the default query of that sensor.</p><p><strong class=\"li-title\">doNotExecute</strong>: <code>Boolean</code>: (by default true) If you don’t want to execute query immediatly after dependent sensor changees, then apply true as value. In this case your component already append sensor query but just didn’t execute it immediatly.</p><p>Let’s take an example if topics lists is depenedent on city selection (topicSensor is dependent on citySensor).</p><p>To achieve this</p><p>Use this sensorId in other sensor.</p><p>City Sensor should look like this</p><p>Topic Sensor should look like this</p>","link":"./v1/getting-started/Dependency.html","spaLink":"#/v1/getting-started/Dependency","title":"DEFINE DEPENDENCY ON OTHER SENSORS"},{"content":"<h2 id=\"-elasticsearch-mapping\">Elasticsearch Mapping</h2><p>```\ncurl ‘<a href=\"http://scalr.api.appbase.io/map_demo/_mapping/meetupdata1?ignore_conflicts=true&amp;update_all_types=true\">http://scalr.api.appbase.io/map_demo/_mapping/meetupdata1?ignore_conflicts=true&amp;update_all_types=true</a>‘ -X PUT -d ‘{\n  “meetupdata1”: {\n    “properties”: {\n      “group”: {\n        “properties”: {\n          “group_city_new”: {\n            “type”: “multi_field”,\n            “fields”: {\n              “group_city_simple”: {\n                “type”: “string”,\n                “index”: “not_analyzed”\n              },\n              “group_city_ngrams”: {\n                “type”: “string”,\n                “analyzer”: “nGram_analyzer”,\n                “search_analyzer”: “whitespace_analyzer”\n              }\n            }\n          },\n          “group_city”: {\n            “type”: “string”,\n            “fields”: {\n              “raw”: { \n                “type”:  “string”,\n                “index”: “not_analyzed”\n              }\n            }\n          },\n          “group_topics”: {\n            “properties”: {\n              “topic_name_new”: {\n                “type”: “multi_field”,\n                “fields”: {\n                  “topic_name_simple”: {\n                    “type”: “string”,\n                    “index”: “not_analyzed”\n                  },\n                  “topic_name_ngrams”: {\n                    “type”: “string”,\n                    “analyzer”: “nGram_analyzer”,\n                    “search_analyzer”: “whitespace_analyzer”\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      “venue_new”: {\n        “type”: “multi_field”,\n        “fields”: {\n          “venue_name_simple”: {\n            “type”: “string”,\n            “index”: “not_analyzed”\n          },\n          “venue_name_ngrams”: {\n            “type”: “string”,\n            “analyzer”: “nGram_analyzer”,\n            “search_analyzer”: “whitespace_analyzer”\n          }\n        }</p><p>  }\n}</p><p>‘ -u aT29UsiAp:e0d26007-d818-4559-8244-c3c2fbad45ad -H ‘Content-Type: application/json’</p>","link":"./v1/mapping/mapping.html","spaLink":"#/v1/mapping/mapping","title":"ELASTICSEARCH MAPPING"}]